-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Drop existing stored procedures

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_FindEmployees]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}University_FindEmployees]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID]
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID]
GO

-- Create stored procedures

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_FindEmployees] 
	@searchText nvarchar (50),
	@includeNonPublished bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SET @searchText = N'%' + @searchText + '%';
	
	-- Sort by max weight of all employee positions
	SELECT E.* FROM {databaseOwner}[{objectQualifier}University_Employees] AS E  
		INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
			ON E.EmployeeID = EW.EmployeeID
	WHERE (E.FirstName + ' ' + E.LastName + ' ' + E.OtherName LIKE @searchText
          OR E.Email LIKE @searchText OR E.SecondaryEmail LIKE @searchText 
          OR E.Phone LIKE @searchText OR E.CellPhone LIKE @searchText 
          OR E.WorkingPlace LIKE @searchText)
		  AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
	ORDER BY EW.MaxWeight DESC, E.LastName;
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetEmployeesByDivisionID] 
	@divisionId int,
	@sortType int,
	@includeNonPublished bit,
	@weightMod = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	IF (@sortType = 1)
	BEGIN
		-- Sort by total (summary) weight of all employee positions
		SELECT DE.* FROM (
			SELECT DISTINCT E.*, EW.TotalWeight 
				FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
						ON E.EmployeeID = OP.EmployeeID 
					INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesTotalWeight] AS EW
						ON E.EmployeeID = EW.EmployeeID
			WHERE OP.DivisionID = @divisionId AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
		) AS DE
		ORDER BY DE.TotalWeight DESC, DE.LastName;
	END
	ELSE IF (@sortType = 2)
	BEGIN
		-- Sort by employee lastname, then firstname
		SELECT DISTINCT E.*
			FROM {databaseOwner}[{objectQualifier}University_Employees] AS E 
				INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
					ON E.EmployeeID = OP.EmployeeID 
			WHERE OP.DivisionID = @divisionId AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
		ORDER BY E.LastName
	END
	ELSE -- IF (@sortType = 0)
	BEGIN
		-- Sort by max weight of all employee positions (by default)
		SELECT E.* FROM (
			SELECT EW.EmployeeID, 
				-- Add some weight to prime positions in the current division
				MAX (EW.MaxWeight + CASE WHEN (OP.DivisionID = @divisionId AND OP.IsPrime = 1) THEN @weightMod ELSE 0 END) AS MaxWeight
				FROM {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
						ON EW.EmployeeID = OP.EmployeeID 
			WHERE OP.DivisionID = @divisionId  AND (EW.IsPublished = 1 OR @includeNonPublished = 1) 
			GROUP BY EW.EmployeeID
		) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
		ORDER BY DE.MaxWeight DESC, E.LastName;
	END
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}University_GetRecursiveEmployeesByDivisionID] 
	-- Add the parameters for the stored procedure here
	@divisionId int,
	@sortType int,
	@includeNonPublished bit,
	@weightMod = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF (@sortType = 1)
	BEGIN
		SELECT DE.* FROM (
			SELECT DISTINCT E.*, EW.TotalWeight 
				FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions]	AS OP
						ON DH.DivisionID = OP.DivisionID
					INNER JOIN {databaseOwner}[{objectQualifier}.University_Employees] AS E 
						ON E.EmployeeID = OP.EmployeeID 
					INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesTotalWeight] AS EW
						ON E.EmployeeID = EW.EmployeeID
			WHERE E.IsPublished = 1 OR @includeNonPublished = 1
		) AS DE
		ORDER BY DE.TotalWeight DESC, DE.LastName;
	END
	ELSE IF (@sortType = 2)
	BEGIN
		-- Sort by employee lastname, then firstname
		SELECT DISTINCT E.*
			FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
				INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
					ON DH.DivisionID = OP.DivisionID
				INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E 
					ON E.EmployeeID = OP.EmployeeID
			WHERE OP.DivisionID = @divisionId AND (E.IsPublished = 1 OR @includeNonPublished = 1) 
		ORDER BY E.LastName;
	END
	ELSE -- IF (@sortType = 0)
	BEGIN
		-- Sort by max weight of all employee positions (by default)
		SELECT E.* FROM (
			SELECT EW.EmployeeID, 
				-- Add some weight to prime positions in the current division
				MAX (EW.MaxWeight + CASE WHEN (OP.DivisionID = @divisionId AND OP.IsPrime = 1) THEN @weightMod ELSE 0 END) AS MaxWeight
				FROM {databaseOwner}[{objectQualifier}University_DivisionsHierarchy](@divisionId) AS DH
					INNER JOIN {databaseOwner}[{objectQualifier}University_OccupiedPositions] AS OP
						ON DH.DivisionID = OP.DivisionID
					INNER JOIN {databaseOwner}[{objectQualifier}vw_University_EmployeesMaxWeight] AS EW
						ON EW.EmployeeID = OP.EmployeeID 
			WHERE EW.IsPublished = 1 OR @includeNonPublished = 1
			GROUP BY EW.EmployeeID
		) AS DE INNER JOIN {databaseOwner}[{objectQualifier}University_Employees] AS E ON DE.EmployeeID = E.EmployeeID 
		ORDER BY DE.MaxWeight DESC, E.LastName;
	END
END
GO
